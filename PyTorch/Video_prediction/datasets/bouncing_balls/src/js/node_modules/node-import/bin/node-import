#! /usr/bin/env node
// -*- js -*-

"use strict";

var colors  = require('colors/safe'),
    optimis = require('optimist'),
    imports = require('../index.js'),
    configs = require('../package.json'),

    npm     = require('npm'),
    fst     = require('fs-extra');

/* Installer Definitions */
var collection;

if ( fst.existsSync(process.cwd() + '/imports.json') ) {
    collection = require(process.cwd() + '/imports.json');
}

/* Configs should have default options */
if ( !collection || !'object' == typeof collection ) {
    collection = {
        'default' : {
            packages : [],
            location : 'imports/'
        }
    }
}
else if ( 'object' == typeof collection && !'default' in collection ) {
    collection[ 'default' ] = {
        packages : [],
        location : 'imports/'
    }
}

/* Install List */
var installs = [];
var complete = [];

/* Installer Definitions Configurator */
var initconf = function (pkglist, save, output) {
    /* If no package target, then use install from json */
    if ( !Array.isArray(pkglist) ) {
        for ( var prop in collection ) {
            if ( collection[ prop ].packages.length > 0 ) {
                installs.push({
                    output : collection[ prop ].location,
                    module : collection[ prop ].packages,
                    target : prop,
                    update : false
                });
            }
        }
    }

    /* If has package target, then use new install */
    else {
        /* Check does need to save installed packages or not */
        if ( save ) {
            /* If should be saved, then try look the output. */
            if ( 'string' == typeof output ) {
                /* If found output in collections, then append to that collection */
                if ( output in collection ) {
                    installs.push({
                        output : collection[ output ].location,
                        module : pkglist,
                        target : output,
                        update : true
                    });
                }

                /* Else if collection not found, use default collection */
                else {
                    installs.push({
                        output : output,
                        module : pkglist,
                        target : 'default',
                        update : true
                    });

                    if ( collection[ 'default' ].location === 'imports/' ) {
                        collection[ 'default' ].location = output;
                    }
                }
            }

            /* If no output defined, use default ouput (main collection) */
            else {
                installs.push({
                    output : collection[ 'default' ].location,
                    module : pkglist,
                    target : 'default',
                    update : true
                });
            }
        }

        /* If not should to save, check does has custom output */
        else {
            /* If has custom output, install in that location wihtout saving */
            if ( 'string' == typeof output ) {
                if ( output in collection ) {
                    installs.push({
                        output : collection[ output ].location,
                        module : pkglist,
                        target : output,
                        update : false
                    });
                }
                else {
                    installs.push({
                        output : output,
                        module : pkglist,
                        target : 'default',
                        update : false
                    });
                }
            }

            /* Else use default location and without saving */
            else {
                installs.push({
                    output : collection[ 'default' ].location,
                    module : pkglist,
                    target : 'default',
                    update : false
                });
            }
        }
    }

    install();
}

/* Pacakge Installer */
var install = function () {
    var cdone = 0, pdone = 0;

    if ( installs.length > 0 ) {
        nextcol();
    }

    /* Next Collection */
    function nextcol() {
        if ( cdone < installs.length ) {
            /* Getting Target */
            var target = installs[ cdone ];

            /* Increase done stat */
            cdone++;

            /* Creating current install list */
            var alias = '';

            target.module.forEach(function (name) {
                alias += name + ', ';
            });

            alias = alias.replace(/\,\s+$/, '');

            /* NPM Install */
            npm.load(function () {
                /* Print that we're currently installing packages */
                console.log(colors.green.bold('\r\nInstalling ') +
                colors.yellow.bold('[ ' + alias + ' ]') + ' into ' +
                colors.yellow.bold(target.output) + ' ...\r\n');

                npm.commands.install('./.imptemp/', target.module, function (err, data) {
                    if ( !err ) {
                        movepkg(target);
                    }
                });
            });
        }
        else {
            cdone = 0;

            savepkg();
        }
    }

    /* Save Packages */
    function savepkg() {
        var save = false;

        /* Creating current install list */
        var alias = '';

        complete.forEach(function (name) {
            alias += name + ', ';
        });

        alias = alias.replace(/\,\s+$/, '');

        /* Appending Packages */
        for ( var prop in installs ) {
            var current = installs[ prop ];

            if ( current.update ) {
                save = true;

                current.module.forEach(function (pkg) {
                    if ( collection[ current.target ].packages.indexOf(pkg) < 0 ) {
                        collection[ current.target ].packages.push(pkg);
                    }
                });
            }
        }

        /* Saving Packages */
        if ( save ) {
            fst.writeJSONSync(process.cwd() + '/imports.json', collection);
        }

        /* Print Complete Status */
        console.log(colors.bold('\r\nInstalled Packages: ') + colors.yellow.bold('[ ' + alias + ' ]'));
    }

    /* Move Installed */
    function movepkg(target) {
        /* If move not completed, keep looping */
        if ( pdone < target.module.length ) {
            var current = target.module[ pdone ];

            var itarget = './.imptemp/node_modules/' + current;
            var mtarget = target.output.replace(/\/$/, '').replace(/^\.\//, '') + '/' + current;

            console.log(colors.green.bold('\r\nFinishing install ') + colors.yellow.bold(current) + ' ...');

            /* Check if target dir is exists */
            if ( fst.existsSync('./' + mtarget) ) {
                fst.removeSync('./' + mtarget);
            }

            /* Moving Packages from temporary location */
            fst.move(itarget, './' + mtarget, { clobber : true }, function (err) {
                if ( !err ) {
                    /* Increasing done stat */
                    pdone++;

                    /* Print install current package complete */
                    console.log(colors.yellow.bold(current) + ' installed in ' + colors.yellow.bold(mtarget));

                    /* Push to complete states */
                    complete.push(current);

                    /* Move next package */
                    movepkg(target);
                }
                else {
                    console.log(err);
                }
            });
        }

        /* If install collection completed, install next collection. */
        else {
            /* Reset done stat */
            pdone = 0;

            /* Proceed next collection */
            nextcol();
        }
    }
}

/* Boolean Getter */
var tobool = function (obj) {
    if ( 'string' === typeof obj ) {
        if ( obj === 'true' ) {
            return true;
        }
        else if ( obj === 'false' ) {
            return false;
        }
    }

    else if ( 'boolean' === typeof obj ) {
        if ( obj === true ) {
            return true;
        }
        else if ( obj === false ) {
            return false;
        }
    }

    return undefined;
}

/* Usage Help */
var usage =
        colors.cyan('NodeJS Scripts Import/Export (' + configs.name + ')\n') +
        colors.green('v' + configs.version + '\n') +
        configs.description + '\n\n' +
        colors.green('Usage: ') + colors.yellow('import') + ' ' + colors.cyan('[options] [files ...]');

/* Executor */
var exec = function (argv) {
    var RUN = tobool(argv.r);
    var ASY = tobool(argv.a);
    var EXP = tobool(argv.e);
    var MIN = tobool(argv.u);
    var MAP = tobool(argv.s);
    var BET = tobool(argv.b);
    var NOS = tobool(argv.n);
    var DIR = 'string' == typeof argv.o ? argv.o : null;

    var opt = {
        exec      : RUN,
        async     : ASY,
        export    : EXP,
        exportDir : DIR,
        exportMin : MIN,
        exportMap : MAP,
        beautify  : BET,
        noscript: NOS
    }

    return imports(argv._, opt, argv.v);
}

/* Registering Options */
optimis
    .usage(usage)
    .options('r', {
        describe : 'Run imported scripts.',
        type     : 'boolean',
        default  : false
    })
    .options('a', {
        describe : 'Run in async mode.',
        type     : 'boolean',
        default  : false
    })
    .options('b', {
        describe : 'Beautify Scripts',
        type     : 'boolean',
        default  : true
    })
    .options('n', {
        describe : 'Tell as non-javascript concat',
        type     : 'boolean',
        default  : false
    })
    .options('e', {
        describe : 'Export imported scripts.',
        type     : 'boolean',
        default  : false
    })
    .options('u', {
        describe : 'Uglify exported scripts.',
        type     : 'boolean',
        default  : false
    })
    .options('s', {
        describe : 'Include sourcemap of exported scripts.',
        type     : 'boolean',
        default  : false
    })
    .options('o', {
        describe : 'Output directory for exported scripts.',
        type     : 'string',
        default  : null
    })
    .options('v', {
        describe : 'Logs all processes.',
        type     : 'boolean',
        default  : false
    })
    .options('h', {
        describe : 'Show helps.'
    })
    .options('i', {
        describe : 'Install NPM Packages',
    })
    .options('save', {
        describe : 'Save installed package to imports.json',
        type     : 'boolean',
        default  : false
    })
    .check(function (argv) {
        /* Show Helps */
        if ( argv.h ) {
            return optimis.showHelp();
        }

        /* Install Package */
        else if ( argv.i ) {
            /* Creating Package List */
            var pkglist = [];

            /* Append Target Package */
            if ( 'string' == typeof argv.i ) {
                pkglist.push(argv.i);
            }
            argv._.forEach(function (pkg) {
                pkglist.push(pkg);
            });

            if ( pkglist.length > 0 ) {
                if ( argv.save == true ) {
                    if ( 'string' == typeof argv.o ) {
                        initconf(pkglist, true, argv.o);
                    }

                    else {
                        initconf(pkglist, true);
                    }
                }
                else {
                    if ( 'string' == typeof argv.o ) {
                        initconf(pkglist, false, argv.o);
                    }
                    else {
                        initconf(pkglist);
                    }
                }
            }

            else {
                initconf();
            }
        }

        /* No Inputs Defined */
        else {
            if ( !argv._.length ) {
                throw new Error("input required");
            }

            /* Import Scripts */
            else {
                exec(argv);
            }
        }
    })
    .argv;
